<!-- vim: syntax=markdown -->

# Day 5

## Setup

```elixir
Mix.install([
  {:kino, github: "livebook-dev/kino"}
])
```

```elixir
input = Kino.Input.textarea("Please add your input:")
```

## Part 1

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input
|> Kino.Input.read()
|> String.split("\n", trim: true)
|> Enum.map(fn line ->
  line
  |> String.replace(" -> ", ",")
  |> String.split(",", trim: true)
  |> Enum.map(&String.to_integer/1)
  |> Enum.chunk_every(2)
  |> IO.inspect()
end)
|> Enum.filter(fn [[x1, y1], [x2, y2]] ->
  x1 == x2 or y1 == y2
end)
|> Enum.flat_map(fn [[x1, y1], [x2, y2]] ->
  for x <- x1..x2, y <- y1..y2, do: [x, y]
end)
|> Enum.frequencies()
|> Enum.count(fn {_k, v} -> v >= 2 end)
```

## Part 2

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
# input = """
# 0,9 -> 5,9
# 8,0 -> 0,8
# 9,4 -> 3,4
# 2,2 -> 2,1
# 7,0 -> 7,4
# 6,4 -> 2,0
# 0,9 -> 2,9
# 3,4 -> 1,4
# 0,0 -> 8,8
# 5,5 -> 8,2
# """

input
|> Kino.Input.read()
|> String.split("\n", trim: true)
|> Stream.map(fn line ->
  line
  |> String.replace(" -> ", ",")
  |> String.split(",", trim: true)
  |> Enum.map(&String.to_integer/1)
  |> Enum.chunk_every(2)
end)
|> Enum.filter(fn [[x1, y1], [x2, y2]] ->
  # vertical / horizontal
  x1 == x2 or y1 == y2 or
    abs(x1 - x2) == abs(y1 - y2)
end)
|> Enum.flat_map(fn
  [[x, y1], [x, y2]] ->
    for y <- y1..y2, do: {x, y}

  [[x1, y], [x2, y]] ->
    for x <- x1..x2, do: {x, y}

  [[x1, y1], [x2, y2]] ->
    for {x, i} <- Enum.with_index(x1..x2), {y, ^i} <- Enum.with_index(y1..y2), do: {x, y}
end)
|> Enum.frequencies()
|> Map.values()
|> Enum.count(fn v -> v >= 2 end)
```

## Part 2 - stream

```elixir
input
|> Kino.Input.read()
|> String.splitter("\n", trim: true)
|> Stream.map(fn line ->
  line
  |> String.replace(" -> ", ",")
  |> String.split(",", trim: true)
  |> Enum.map(&String.to_integer/1)
  |> Enum.chunk_every(2)
end)
|> Stream.filter(fn [[x1, y1], [x2, y2]] ->
  # vertical / horizontal
  x1 == x2 or y1 == y2 or
    abs(x1 - x2) == abs(y1 - y2)
end)
|> Stream.flat_map(fn
  [[x, y1], [x, y2]] ->
    for y <- y1..y2, do: {x, y}

  [[x1, y], [x2, y]] ->
    for x <- x1..x2, do: {x, y}

  [[x1, y1], [x2, y2]] ->
    for {x, i} <- Enum.with_index(x1..x2), {y, ^i} <- Enum.with_index(y1..y2), do: {x, y}
end)
|> Enum.frequencies()
|> Map.values()
|> Enum.count(fn v -> v >= 2 end)
```
